(()=>{var e={};e.id=159,e.ids=[159],e.modules={846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},1753:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>y,routeModule:()=>l,serverHooks:()=>x,workAsyncStorage:()=>g,workUnitAsyncStorage:()=>m});var n={};r.r(n),r.d(n,{PATCH:()=>p,PUT:()=>c});var s=r(2706),o=r(8203),a=r(5994),i=r(5234),u=r(4902),d=r(9187);async function p(e){try{await (0,i.A)();let t=new URL(e.nextUrl).pathname.split("/").pop();if(!t)return d.NextResponse.json({error:"Booking Id is required"},{status:400});let r=await u.A.findByIdAndUpdate(t,{status:"done"},{new:!0});if(!r)return d.NextResponse.json({error:"Booking not found"},{status:404});return d.NextResponse.json({message:"Status updated",data:r},{status:200})}catch(e){return d.NextResponse.json({error:"Error updating status"},{status:500})}}async function c(e){try{await (0,i.A)();let t=new URL(e.nextUrl).pathname.split("/").pop();if(!t)return d.NextResponse.json({error:"Booking Id is required"},{status:400});let r=await e.json(),n=await u.A.findByIdAndUpdate(t,{adminNote:r.adminNote},{new:!0});if(!r.adminNote)return d.NextResponse.json({error:"Admin Note is required."},{status:400});if(!n)return d.NextResponse.json({error:"Error updating the booking"},{status:404});return d.NextResponse.json({message:"Admin Note updated",data:n})}catch(e){return d.NextResponse.json({error:"Error updating admin note"},{status:500})}}let l=new s.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/cleaning/[id]/route",pathname:"/api/cleaning/[id]",filename:"route",bundlePath:"app/api/cleaning/[id]/route"},resolvedPagePath:"/home/shashank/Documents/GitHub/Project/WipeOut-Services/app/api/cleaning/[id]/route.ts",nextConfigOutput:"",userland:n}),{workAsyncStorage:g,workUnitAsyncStorage:m,serverHooks:x}=l;function y(){return(0,a.patchFetch)({workAsyncStorage:g,workUnitAsyncStorage:m})}},3033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},4870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4902:(e,t,r)=>{"use strict";r.d(t,{A:()=>a});var n=r(6037),s=r.n(n);let o=new(s()).Schema({serviceType:{type:String,required:!0,enum:["general-cleaning","end-of-lease-cleaning","office-cleaning","deep-cleaning","regular-cleaning","construction-cleaning","commercial-cleaning","carpet-cleaning","apartment-cleaning","restaurant-cleaning"]},location:{type:String,required:!0},phone:{type:String,required:!0,match:/^[0-9]{10}$/},email:{type:String,match:/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/},bedrooms:{type:Number,min:1},bathrooms:{type:Number,min:1},date:{type:Date,required:!0},time:{type:String},status:{type:String,enum:["pending","done"],default:"pending"},adminNote:{type:String,default:""}}),a=s().models.CleaningForm||s().model("CleaningForm",o)},5234:(e,t,r)=>{"use strict";r.d(t,{A:()=>o});var n=r(6037),s=r.n(n);let o=async()=>{if(s().connections[0].readyState){console.log("Already connected to mongoDB.");return}try{await s().connect(process.env.MONGODB_URI,{useNewUrlParser:!0,useUnifiedTopology:!0}),console.log("Successfully connected to MongoDB.")}catch(e){console.error("Failed to connect to MongoDB:",e)}}},6037:e=>{"use strict";e.exports=require("mongoose")},6487:()=>{},8335:()=>{},9294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[638,452],()=>r(1753));module.exports=n})();